-- <copyright file="DATEADD_UDF_INTERVAL.sql" company="Mobilize.Net">
--        Copyright (C) Mobilize.Net info@mobilize.net - All Rights Reserved
-- 
--        This file is part of the Mobilize Frameworks, which is
--        proprietary and confidential.
-- 
--        NOTICE:  All information contained herein is, and remains
--        the property of Mobilize.Net Corporation.
--        The intellectual and technical concepts contained herein are
--        proprietary to Mobilize.Net Corporation and may be covered
--        by U.S. Patents, and are protected by trade secret or copyright law.
--        Dissemination of this information or reproduction of this material
--        is strictly forbidden unless prior written permission is obtained
--        from Mobilize.Net Corporation.
-- </copyright>

-- =========================================================================================================
-- DESCRIPTION: THIS DATEADD_UDF() IS USED AS A TEMPLATE FOR ALL THE CASES WHEN THERE IS AN ADDITION
-- BETWEEN AN UNKNOWN TYPE AND AN INTERVAL
-- PARAMETERS:
--  RETURNS: THE DATE OR TIMESTAMP RESULT OF APPLYING THE GIVEN INTERVAL
--  TO TEST COMPARE THIS OUTPUT IN ORACLE:
-- CREATE TABLE TIMES(
-- AsTimeStamp TIMESTAMP,
-- AsTimestampTwo TIMESTAMP,
-- AsDate DATE,
-- AsDateTwo DATE
-- );

-- INSERT INTO TIMES VALUES (
-- TO_TIMESTAMP('05/11/21, 11:00 A.M.', 'dd/mm/yy, hh:mi A.M.'), 
-- TO_TIMESTAMP('05/11/21, 10:00 A.M.', 'dd/mm/yy, hh:mi A.M.'), 
-- TO_DATE('06/11/21', 'dd/mm/yy'), 
-- TO_DATE('05/11/21', 'dd/mm/yy'));



-- DROP TABLE UNKNOWN_TABLE;
-- CREATE TABLE UNKNOWN_TABLE(Unknown timestamp);
-- INSERT  INTO UNKNOWN_TABLE VALUES (TO_TIMESTAMP('01/10/09, 12:00 P.M.', 'dd/mm/yy, hh:mi P.M.'));
-- SELECT * FROM UNKNOWN_TABLE;

-- SELECT 
--  AsTimeStamp+INTERVAL '1-1' YEAR(2) TO MONTH,
--  AsTimeStamp-INTERVAL '1-1' YEAR(2) TO MONTH,
--  AsTimeStamp+INTERVAL '2-1' YEAR(4) TO MONTH,
--  AsTimeStamp-INTERVAL '2-1' YEAR(4) TO MONTH,
--  AsTimeStamp+INTERVAL '1' MONTH,
--  AsTimeStamp-INTERVAL '1' MONTH,
--  AsTimeStamp+INTERVAL '2' MONTH,
--  AsTimeStamp-INTERVAL '2' MONTH,
--  AsTimeStamp+INTERVAL '1 01:00:00.222' DAY TO SECOND(3),
--  AsTimeStamp-INTERVAL '1 01:00:00.222' DAY TO SECOND(3),
--  AsTimeStamp+INTERVAL '1 01:10' DAY TO MINUTE,
--  AsTimeStamp-INTERVAL '1 01:10' DAY TO MINUTE,
--  AsTimeStamp+INTERVAL '1 1' DAY TO HOUR,
--  AsTimeStamp-INTERVAL '1 1' DAY TO HOUR,
--  AsTimeStamp+INTERVAL '10' DAY,
--  AsTimeStamp-INTERVAL '10' DAY,
--  AsTimeStamp+INTERVAL '3:05' HOUR TO MINUTE,
--  AsTimeStamp-INTERVAL '3:05' HOUR TO MINUTE,
--  AsTimeStamp+INTERVAL '5' HOUR,
--  AsTimeStamp-INTERVAL '5' HOUR,
--  AsTimeStamp+INTERVAL '5:10' MINUTE TO SECOND,
--  AsTimeStamp-INTERVAL '5:10' MINUTE TO SECOND,
--  AsTimeStamp+INTERVAL '30' MINUTE,
--  AsTimeStamp-INTERVAL '30' MINUTE,
--  AsTimeStamp+INTERVAL '333' HOUR(3),
--  AsTimeStamp-INTERVAL '333' HOUR(3),
--  AsTimeStamp+INTERVAL '15.6789' SECOND(2,3),
--  AsTimeStamp-INTERVAL '15.6789' SECOND(2,3),
--  AsDate+INTERVAL '1-1' YEAR(2) TO MONTH,
--  AsDate-INTERVAL '1-1' YEAR(2) TO MONTH,
--  AsDate+INTERVAL '2-1' YEAR(4) TO MONTH,
--  AsDate-INTERVAL '2-1' YEAR(4) TO MONTH,
--  AsDate+INTERVAL '1' MONTH,
--  AsDate-INTERVAL '1' MONTH,
--  AsDate+INTERVAL '2' MONTH,
--  AsDate-INTERVAL '2' MONTH,
--  AsDate+INTERVAL '1 01:00:00.222' DAY TO SECOND(3),
--  AsDate-INTERVAL '1 01:00:00.222' DAY TO SECOND(3),
--  AsDate+INTERVAL '1 01:10' DAY TO MINUTE,
--  AsDate-INTERVAL '1 01:10' DAY TO MINUTE,
--  AsDate+INTERVAL '1 1' DAY TO HOUR,
--  AsDate-INTERVAL '1 1' DAY TO HOUR,
--  AsDate+INTERVAL '10' DAY,
--  AsDate-INTERVAL '10' DAY,
--  AsDate+INTERVAL '3:05' HOUR TO MINUTE,
--  AsDate-INTERVAL '3:05' HOUR TO MINUTE,
--  AsDate+INTERVAL '5' HOUR,
--  AsDate-INTERVAL '5' HOUR,
--  AsDate+INTERVAL '5:10' MINUTE TO SECOND,
--  AsDate-INTERVAL '5:10' MINUTE TO SECOND,
--  AsDate+INTERVAL '30' MINUTE,
--  AsDate-INTERVAL '30' MINUTE,
--  AsDate+INTERVAL '333' HOUR(3),
--  AsDate-INTERVAL '333' HOUR(3),
--  AsDate+INTERVAL '15.6789' SECOND(2,3),
--  AsDate-INTERVAL '15.6789' SECOND(2,3),
--  Unknown+INTERVAL '1-1' YEAR(2) TO MONTH,
--  Unknown-INTERVAL '1-1' YEAR(2) TO MONTH,
--  Unknown+INTERVAL '2-1' YEAR(4) TO MONTH,
--  Unknown-INTERVAL '2-1' YEAR(4) TO MONTH,
--  Unknown+INTERVAL '1' MONTH,
--  Unknown-INTERVAL '1' MONTH,
--  Unknown+INTERVAL '2' MONTH,
--  Unknown-INTERVAL '2' MONTH,
--  Unknown+INTERVAL '1 01:00:00.222' DAY TO SECOND(3),
--  Unknown-INTERVAL '1 01:00:00.222' DAY TO SECOND(3),
--  Unknown+INTERVAL '1 01:10' DAY TO MINUTE,
--  Unknown-INTERVAL '1 01:10' DAY TO MINUTE,
--  Unknown+INTERVAL '1 1' DAY TO HOUR,
--  Unknown-INTERVAL '1 1' DAY TO HOUR,
--  Unknown+INTERVAL '10' DAY,
--  Unknown-INTERVAL '10' DAY,
--  Unknown+INTERVAL '3:05' HOUR TO MINUTE,
--  Unknown-INTERVAL '3:05' HOUR TO MINUTE,
--  Unknown+INTERVAL '5' HOUR,
--  Unknown-INTERVAL '5' HOUR,
--  Unknown+INTERVAL '5:10' MINUTE TO SECOND,
--  Unknown-INTERVAL '5:10' MINUTE TO SECOND,
--  Unknown+INTERVAL '30' MINUTE,
--  Unknown-INTERVAL '30' MINUTE,
--  Unknown+INTERVAL '333' HOUR(3),
--  Unknown-INTERVAL '333' HOUR(3),
--  Unknown+INTERVAL '15.6789' SECOND(2,3),
--  Unknown-INTERVAL '15.6789' SECOND(2,3),
--  INTERVAL '1-1' YEAR(2) TO MONTH+AsTimeStamp,
--  INTERVAL '1-1' YEAR(2) TO MONTH+AsDate,
--  INTERVAL '1-1' YEAR(2) TO MONTH+Unknown,
--  INTERVAL '2-1' YEAR(4) TO MONTH+AsTimeStamp,
--  INTERVAL '2-1' YEAR(4) TO MONTH+AsDate,
--  INTERVAL '2-1' YEAR(4) TO MONTH+Unknown,
--  INTERVAL '1' MONTH+AsTimeStamp,
--  INTERVAL '1' MONTH+AsDate,
--  INTERVAL '1' MONTH+Unknown,
--  INTERVAL '2' MONTH+AsTimeStamp,
--  INTERVAL '2' MONTH+AsDate,
--  INTERVAL '2' MONTH+Unknown,
--  INTERVAL '1 01:00:00.222' DAY TO SECOND(3)+AsTimeStamp,
--  INTERVAL '1 01:00:00.222' DAY TO SECOND(3)+AsDate,
--  INTERVAL '1 01:00:00.222' DAY TO SECOND(3)+Unknown,
--  INTERVAL '1 01:10' DAY TO MINUTE+AsTimeStamp,
--  INTERVAL '1 01:10' DAY TO MINUTE+AsDate,
--  INTERVAL '1 01:10' DAY TO MINUTE+Unknown,
--  INTERVAL '1 1' DAY TO HOUR+AsTimeStamp,
--  INTERVAL '1 1' DAY TO HOUR+AsDate,
--  INTERVAL '1 1' DAY TO HOUR+Unknown,
--  INTERVAL '10' DAY+AsTimeStamp,
--  INTERVAL '10' DAY+AsDate,
--  INTERVAL '10' DAY+Unknown,
--  INTERVAL '3:05' HOUR TO MINUTE+AsTimeStamp,
--  INTERVAL '3:05' HOUR TO MINUTE+AsDate,
--  INTERVAL '3:05' HOUR TO MINUTE+Unknown,
--  INTERVAL '5' HOUR+AsTimeStamp,
--  INTERVAL '5' HOUR+AsDate,
--  INTERVAL '5' HOUR+Unknown,
--  INTERVAL '5:10' MINUTE TO SECOND+AsTimeStamp,
--  INTERVAL '5:10' MINUTE TO SECOND+AsDate,
--  INTERVAL '5:10' MINUTE TO SECOND+Unknown,
--  INTERVAL '30' MINUTE+AsTimeStamp,
--  INTERVAL '30' MINUTE+AsDate,
--  INTERVAL '30' MINUTE+Unknown,
--  INTERVAL '333' HOUR(3)+AsTimeStamp,
--  INTERVAL '333' HOUR(3)+AsDate,
--  INTERVAL '333' HOUR(3)+Unknown,
--  INTERVAL '15.6789' SECOND(2,3)+AsTimeStamp,
--  INTERVAL '15.6789' SECOND(2,3)+AsDate,
--  INTERVAL '15.6789' SECOND(2,3)+Unknown 
-- FROM TIMES, UNKNOWN_TABLE;
-- 
-- With this code in SF
-- ALTER SESSION SET TIMESTAMP_NTZ_OUTPUT_FORMAT= 'DD-MON-YY HH.MI.SS.FF6 AM'
-- ALTER SESSION SET DATE_OUTPUT_FORMAT= 'DD-MON-YY'
-- CREATE OR REPLACE TABLE UNKNOWN_TABLE(Unknown timestamp);
-- INSERT  INTO UNKNOWN_TABLE VALUES (TO_TIMESTAMP('01/10/09, 12:00 P.M.', 'dd/mm/yy, hh:mi P.M.'));
-- SELECT * FROM UNKNOWN_TABLE;

-- CREATE TABLE TIMES(
-- AsTimeStamp TIMESTAMP,
-- AsTimestampTwo TIMESTAMP,
-- AsDate DATE,
-- AsDateTwo DATE
-- );

-- INSERT INTO TIMES VALUES (
-- TO_TIMESTAMP('05/11/21, 11:00 A.M.', 'dd/mm/yy, hh:mi A.M.'), 
-- TO_TIMESTAMP('05/11/21, 10:00 A.M.', 'dd/mm/yy, hh:mi A.M.'), 
-- TO_DATE('06/11/21', 'dd/mm/yy'), 
-- TO_DATE('05/11/21', 'dd/mm/yy'));

-- SELECT 
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''1-1'' YEAR(2) TO MONTH'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''1-1'' YEAR(2) TO MONTH'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''2-1'' YEAR(4) TO MONTH'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''2-1'' YEAR(4) TO MONTH'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''1'' MONTH'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''1'' MONTH'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''2'' MONTH'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''2'' MONTH'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''1 01:10'' DAY TO MINUTE'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''1 01:10'' DAY TO MINUTE'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''1 1'' DAY TO HOUR'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''1 1'' DAY TO HOUR'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''10'' DAY'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''10'' DAY'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''3:05'' HOUR TO MINUTE'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''3:05'' HOUR TO MINUTE'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''5'' HOUR'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''5'' HOUR'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''5:10'' MINUTE TO SECOND'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''5:10'' MINUTE TO SECOND'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''30'' MINUTE'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''30'' MINUTE'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''333'' HOUR(3)'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''333'' HOUR(3)'),
--  DATEADD_UDF(AsTimeStamp,'INTERVAL ''15.6789'' SECOND(2,3)'),
--  DATEDIFF_UDF(AsTimeStamp,'INTERVAL ''15.6789'' SECOND(2,3)'),
--  DATEADD_UDF(AsDate,'INTERVAL ''1-1'' YEAR(2) TO MONTH'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''1-1'' YEAR(2) TO MONTH'),
--  DATEADD_UDF(AsDate,'INTERVAL ''2-1'' YEAR(4) TO MONTH'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''2-1'' YEAR(4) TO MONTH'),
--  DATEADD_UDF(AsDate,'INTERVAL ''1'' MONTH'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''1'' MONTH'),
--  DATEADD_UDF(AsDate,'INTERVAL ''2'' MONTH'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''2'' MONTH'),
--  DATEADD_UDF(AsDate,'INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)'),
--  DATEADD_UDF(AsDate,'INTERVAL ''1 01:10'' DAY TO MINUTE'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''1 01:10'' DAY TO MINUTE'),
--  DATEADD_UDF(AsDate,'INTERVAL ''1 1'' DAY TO HOUR'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''1 1'' DAY TO HOUR'),
--  DATEADD_UDF(AsDate,'INTERVAL ''10'' DAY'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''10'' DAY'),
--  DATEADD_UDF(AsDate,'INTERVAL ''3:05'' HOUR TO MINUTE'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''3:05'' HOUR TO MINUTE'),
--  DATEADD_UDF(AsDate,'INTERVAL ''5'' HOUR'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''5'' HOUR'),
--  DATEADD_UDF(AsDate,'INTERVAL ''5:10'' MINUTE TO SECOND'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''5:10'' MINUTE TO SECOND'),
--  DATEADD_UDF(AsDate,'INTERVAL ''30'' MINUTE'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''30'' MINUTE'),
--  DATEADD_UDF(AsDate,'INTERVAL ''333'' HOUR(3)'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''333'' HOUR(3)'),
--  DATEADD_UDF(AsDate,'INTERVAL ''15.6789'' SECOND(2,3)'),
--  DATEDIFF_UDF(AsDate,'INTERVAL ''15.6789'' SECOND(2,3)'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''1-1'' YEAR(2) TO MONTH'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''1-1'' YEAR(2) TO MONTH'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''2-1'' YEAR(4) TO MONTH'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''2-1'' YEAR(4) TO MONTH'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''1'' MONTH'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''1'' MONTH'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''2'' MONTH'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''2'' MONTH'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''1 01:10'' DAY TO MINUTE'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''1 01:10'' DAY TO MINUTE'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''1 1'' DAY TO HOUR'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''1 1'' DAY TO HOUR'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''10'' DAY'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''10'' DAY'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''3:05'' HOUR TO MINUTE'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''3:05'' HOUR TO MINUTE'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''5'' HOUR'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''5'' HOUR'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''5:10'' MINUTE TO SECOND'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''5:10'' MINUTE TO SECOND'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''30'' MINUTE'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''30'' MINUTE'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''333'' HOUR(3)'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''333'' HOUR(3)'),
--  DATEADD_UDF(UnKnown,'INTERVAL ''15.6789'' SECOND(2,3)'),
--  DATEDIFF_UDF(UnKnown,'INTERVAL ''15.6789'' SECOND(2,3)'),
--  DATEADD_UDF('INTERVAL ''1-1'' YEAR(2) TO MONTH',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''1-1'' YEAR(2) TO MONTH',AsDate),
--  DATEADD_UDF('INTERVAL ''1-1'' YEAR(2) TO MONTH',Unknown),
--  DATEADD_UDF('INTERVAL ''2-1'' YEAR(4) TO MONTH',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''2-1'' YEAR(4) TO MONTH',AsDate),
--  DATEADD_UDF('INTERVAL ''2-1'' YEAR(4) TO MONTH',Unknown),
--  DATEADD_UDF('INTERVAL ''1'' MONTH',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''1'' MONTH',AsDate),
--  DATEADD_UDF('INTERVAL ''1'' MONTH',Unknown),
--  DATEADD_UDF('INTERVAL ''2'' MONTH',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''2'' MONTH',AsDate),
--  DATEADD_UDF('INTERVAL ''2'' MONTH',Unknown),
--  DATEADD_UDF('INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)',AsDate),
--  DATEADD_UDF('INTERVAL ''1 01:00:00.222'' DAY TO SECOND(3)',Unknown),
--  DATEADD_UDF('INTERVAL ''1 01:10'' DAY TO MINUTE',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''1 01:10'' DAY TO MINUTE',AsDate),
--  DATEADD_UDF('INTERVAL ''1 01:10'' DAY TO MINUTE',Unknown),
--  DATEADD_UDF('INTERVAL ''1 1'' DAY TO HOUR',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''1 1'' DAY TO HOUR',AsDate),
--  DATEADD_UDF('INTERVAL ''1 1'' DAY TO HOUR',Unknown),
--  DATEADD_UDF('INTERVAL ''10'' DAY',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''10'' DAY',AsDate),
--  DATEADD_UDF('INTERVAL ''10'' DAY',Unknown),
--  DATEADD_UDF('INTERVAL ''3:05'' HOUR TO MINUTE',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''3:05'' HOUR TO MINUTE',AsDate),
--  DATEADD_UDF('INTERVAL ''3:05'' HOUR TO MINUTE',Unknown),
--  DATEADD_UDF('INTERVAL ''5'' HOUR',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''5'' HOUR',AsDate),
--  DATEADD_UDF('INTERVAL ''5'' HOUR',Unknown),
--  DATEADD_UDF('INTERVAL ''5:10'' MINUTE TO SECOND',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''5:10'' MINUTE TO SECOND',AsDate),
--  DATEADD_UDF('INTERVAL ''5:10'' MINUTE TO SECOND',Unknown),
--  DATEADD_UDF('INTERVAL ''30'' MINUTE',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''30'' MINUTE',AsDate),
--  DATEADD_UDF('INTERVAL ''30'' MINUTE',Unknown),
--  DATEADD_UDF('INTERVAL ''333'' HOUR(3)',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''333'' HOUR(3)',AsDate),
--  DATEADD_UDF('INTERVAL ''333'' HOUR(3)',Unknown),
--  DATEADD_UDF('INTERVAL ''15.6789'' SECOND(2,3)',AsTimeStamp),
--  DATEADD_UDF('INTERVAL ''15.6789'' SECOND(2,3)',AsDate),
--  DATEADD_UDF('INTERVAL ''15.6789'' SECOND(2,3)',Unknown)
-- FROM TIMES, UNKNOWN_TABLE;



-- =========================================================================================================

-- IF you need to add a time to a timestamp use DATEADD_UDF(TZ,TO_INTERVAL(TIME))
CREATE OR REPLACE FUNCTION TO_INTERVAL(D2 TIME) RETURNS STRING
LANGUAGE SQL AS
$$
'INTERVAL ''' || HOUR(D2) || ' HOURS,' || MINUTE(D2) || ' MINUTES,' || SECOND(D2) || ' SECOND'''
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEADD_UDF(INTERVAL_VALUE STRING,D DATE) RETURNS DATE LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 

    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,TO_NUMBER(INPUT_VALUE),D)      
    ELSE
        DATEADD(MICROSECONDS,1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)::DATE
    END CASE    
FROM VARS    
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEDIFF_UDF(INTERVAL_VALUE STRING,D DATE) RETURNS DATE LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 
    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,-1*PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,-1*TO_NUMBER(INPUT_VALUE),D)    
    ELSE
        DATEADD(MICROSECONDS,-1*1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)::DATE
    END CASE    
FROM VARS    
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEADD_UDF(D DATE, INTERVAL_VALUE STRING) RETURNS DATE LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 

    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,TO_NUMBER(INPUT_VALUE),D)      
    ELSE
        DATEADD(MICROSECONDS,1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)::DATE
    END CASE    
FROM VARS    
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEDIFF_UDF(D DATE, INTERVAL_VALUE STRING) RETURNS DATE LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 
    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,-1*PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,-1*TO_NUMBER(INPUT_VALUE),D)    
    ELSE
        DATEADD(MICROSECONDS,-1*1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)::DATE
    END CASE    
FROM VARS    
$$;

-- Timestamp versions 

CREATE OR REPLACE FUNCTION PUBLIC.DATEADD_UDF(INTERVAL_VALUE STRING,D TIMESTAMP) RETURNS TIMESTAMP LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 

    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,TO_NUMBER(INPUT_VALUE),D)      
    ELSE
        DATEADD(MICROSECONDS,1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)
    END CASE    
FROM VARS    
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEDIFF_UDF(INTERVAL_VALUE STRING,D TIMESTAMP) RETURNS TIMESTAMP LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 
    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,-1*PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,-1*TO_NUMBER(INPUT_VALUE),D)    
    ELSE
        DATEADD(MICROSECONDS,-1*1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)
    END CASE    
FROM VARS    
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEADD_UDF(D TIMESTAMP, INTERVAL_VALUE STRING) RETURNS TIMESTAMP LANGUAGE SQL AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 

    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,TO_NUMBER(INPUT_VALUE),D)      
    ELSE
        DATEADD(MICROSECONDS,1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)
    END CASE    
FROM VARS    
$$;

CREATE OR REPLACE FUNCTION PUBLIC.DATEDIFF_UDF(D TIMESTAMP, INTERVAL_VALUE STRING) RETURNS TIMESTAMP LANGUAGE SQL
AS
$$
WITH VARS(INPUT_VALUE, INPUT_PART) AS (
SELECT SUBSTR(INTERVAL_VALUE,11,POSITION('''',INTERVAL_VALUE,11)-11),
       TRIM(SUBSTR(INTERVAL_VALUE,POSITION('''',INTERVAL_VALUE,11)+1)))
SELECT 
    CASE WHEN INPUT_PART='YEAR(2) TO MONTH' OR INPUT_PART='YEAR(4) TO MONTH' THEN
        DATEADD(MONTHS,-1*PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE),D) 
    WHEN INPUT_PART='MONTH' THEN
        DATEADD(MONTHS,-1*TO_NUMBER(INPUT_VALUE),D)    
    ELSE
        DATEADD(MICROSECONDS,-1*1000000*PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE),D)
    END CASE    
FROM VARS    
$$;


CREATE OR REPLACE FUNCTION PUBLIC.INTERVAL_MULTIPLY_UDF
(INPUT_PART VARCHAR(30), INPUT_VALUE VARCHAR(), INPUT_MULT INTEGER)
RETURNS VARCHAR
IMMUTABLE
AS
$$
CASE WHEN INPUT_PART = 'YEAR TO MONTH'
THEN PUBLIC.MONTHS2INTERVAL_UDF(INPUT_PART, PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE) * INPUT_MULT)
ELSE PUBLIC.SECONDS2INTERVAL_UDF(INPUT_PART, PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART, INPUT_VALUE) * INPUT_MULT)
END
$$;


CREATE OR REPLACE FUNCTION PUBLIC.INTERVAL_ADD_UDF
(INPUT_VALUE1 VARCHAR(), INPUT_PART1 VARCHAR(30), INPUT_VALUE2 VARCHAR(), INPUT_PART2 VARCHAR(30), OP CHAR, OUTPUT_PART VARCHAR())
RETURNS VARCHAR
IMMUTABLE
AS
$$
CASE 
    WHEN INPUT_PART1 = 'YEAR TO MONTH' OR INPUT_PART2 = 'YEAR TO MONTH' THEN
        CASE 
            WHEN OP = '+' THEN
                PUBLIC.SECONDS2INTERVAL_UDF(OUTPUT_PART, PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE1) + PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE2))
            WHEN OP = '-' THEN
                PUBLIC.SECONDS2INTERVAL_UDF(OUTPUT_PART, PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE1) - PUBLIC.INTERVAL2MONTHS_UDF(INPUT_VALUE2))
        END
    ELSE 
        CASE 
            WHEN OP = '+' THEN
                PUBLIC.SECONDS2INTERVAL_UDF(OUTPUT_PART, PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART1, INPUT_VALUE1) + PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART2, INPUT_VALUE2))
            WHEN OP = '-' THEN
                PUBLIC.SECONDS2INTERVAL_UDF(OUTPUT_PART, PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART1, INPUT_VALUE1) - PUBLIC.INTERVAL2SECONDS_UDF(INPUT_PART2, INPUT_VALUE2))
        END  
END
$$;


CREATE OR REPLACE FUNCTION PUBLIC.INTERVAL2MONTHS_UDF
(INPUT_VALUE VARCHAR())
RETURNS INTEGER
IMMUTABLE
AS
$$
CASE WHEN SUBSTR(INPUT_VALUE,1,1) = '-' THEN
   12 * CAST(SUBSTR(INPUT_VALUE,1 , POSITION('-', INPUT_VALUE,2)-1) AS INTEGER)
   - CAST(SUBSTR(INPUT_VALUE,POSITION('-', INPUT_VALUE)+1) AS INTEGER)
ELSE
   12 * CAST(SUBSTR(INPUT_VALUE,1 , POSITION('-', INPUT_VALUE,2)-1) AS INTEGER)
   + CAST(SUBSTR(INPUT_VALUE,POSITION('-', INPUT_VALUE)+1) AS INTEGER)
END
$$;

CREATE OR REPLACE FUNCTION PUBLIC.INTERVAL2SECONDS_UDF
(INPUT_PART VARCHAR(30), INPUT_VALUE VARCHAR())
RETURNS DECIMAL(20,6)
IMMUTABLE
AS
$$
CASE WHEN SUBSTR(INPUT_VALUE,1,1) = '-' THEN
   DECODE(INPUT_PART,
           'DAY',              86400 * INPUT_VALUE, 
           'DAY TO HOUR',      86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS DECIMAL(10,0)) 
                               - 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1) AS DECIMAL(10,0)),
           'DAY TO MINUTE',    86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               - 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               - 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) AS INTEGER),
           'DAY TO SECOND',    86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               - 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               - 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) - POSITION(':', INPUT_VALUE) - 1) AS INTEGER)
                               - CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1)+1) AS DECIMAL(10,6)),
           'DAY TO SECOND(3)',  86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               - 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               - 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) - POSITION(':', INPUT_VALUE) - 1) AS INTEGER)
                               - CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1)+1) AS DECIMAL(10,6)),
           'HOUR(3)',          3600 * INPUT_VALUE,  
           'HOUR',             3600 * INPUT_VALUE, 
           'HOUR TO MINUTE',   3600 * CAST(SUBSTR(INPUT_VALUE,1 , POSITION(':', INPUT_VALUE)-1) AS INTEGER)
                               - 60 * CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE)+1) AS INTEGER),
           'HOUR TO SECOND',   3600 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               - 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) - POSITION(':', INPUT_VALUE) - 1) AS INTEGER)
                               - CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1)+1) AS DECIMAL(10,6)),  
           'MINUTE',           60 * INPUT_VALUE,     
           'MINUTE TO SECOND', 60 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               - CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) AS DECIMAL(10,6)),
           'SECOND(2,3)',      INPUT_VALUE, 
           'SECOND',           INPUT_VALUE                                    
            )
ELSE
   DECODE(INPUT_PART,
           'DAY',              86400 * INPUT_VALUE, 
           'DAY TO HOUR',      86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               + 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1) AS INTEGER),
           'DAY TO MINUTE',    86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               + 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               + 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) AS INTEGER),
           'DAY TO SECOND',    86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               + 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               + 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) - POSITION(':', INPUT_VALUE) - 1) AS INTEGER)
                               + CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1)+1) AS DECIMAL(10,6)),
           'DAY TO SECOND(3)',    86400 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(' ', INPUT_VALUE)-1) AS INTEGER) 
                               + 3600 * CAST(SUBSTR(INPUT_VALUE, POSITION(' ', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               + 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) - POSITION(':', INPUT_VALUE) - 1) AS INTEGER)
                               + CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1)+1) AS DECIMAL(10,6)),
           'HOUR(3)',          3600 * INPUT_VALUE,                     
           'HOUR',             3600 * INPUT_VALUE, 
           'HOUR TO MINUTE',   3600 * CAST(SUBSTR(INPUT_VALUE,1 , POSITION(':', INPUT_VALUE)-1) AS INTEGER)
                               + 60 * CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE)+1) AS INTEGER),
           'HOUR TO SECOND',   3600 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               + 60 * CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1, POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) - POSITION(':', INPUT_VALUE) - 1) AS INTEGER)
                               + CAST(SUBSTR(INPUT_VALUE,POSITION(':', INPUT_VALUE, POSITION(':', INPUT_VALUE)+1)+1) AS DECIMAL(10,6)),  
           'MINUTE',           60 * INPUT_VALUE,     
           'MINUTE TO SECOND', 60 * CAST(SUBSTR(INPUT_VALUE, 1, POSITION(':', INPUT_VALUE)-POSITION(' ', INPUT_VALUE)-1) AS INTEGER)
                               + CAST(SUBSTR(INPUT_VALUE, POSITION(':', INPUT_VALUE)+1) AS DECIMAL(10,6)), 
           'SECOND(2,3)',      INPUT_VALUE, 
           'SECOND',           INPUT_VALUE                                    
        )
END
$$;


CREATE OR REPLACE FUNCTION PUBLIC.MONTHS2INTERVAL_UDF
(INPUT_PART VARCHAR(30), INPUT_VALUE NUMBER)
RETURNS VARCHAR
IMMUTABLE
AS
$$
DECODE(INPUT_PART,
                'YEAR',                (INPUT_VALUE/(12))::varchar,
                'YEAR TO MONTH',       TRUNC(INPUT_VALUE / 12) ||'-'|| MOD(INPUT_VALUE, 12)::varchar,     
                'MONTH',               INPUT_VALUE::varchar
)
$$;


CREATE OR REPLACE FUNCTION PUBLIC.SECONDS2INTERVAL_UDF
(INPUT_PART VARCHAR(30), INPUT_VALUE NUMBER)
RETURNS VARCHAR
IMMUTABLE
AS
$$
DECODE(INPUT_PART,
                'DAY',                TRUNC((INPUT_VALUE/(86400)))::varchar,
                'DAY TO HOUR',        TRUNC(INPUT_VALUE/(86400))::varchar || ' ' || 
                                            CASE 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) = 0 THEN '00' 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) < 10 THEN '0' ELSE '' END || 
                                            ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600))::varchar,
                'DAY TO MINUTE',      TRUNC(INPUT_VALUE/(86400))::varchar || ' ' || 
                                            CASE 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) = 0 THEN '00' 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) < 10 THEN '0' ELSE '' END || 
                                            ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600))::varchar || ':' || 
                                                CASE 
                                                    WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) = 0 THEN '00' 
                                                    WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) < 10 THEN '0' ELSE '' END || 
                                                ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60))::varchar,
                'DAY TO SECOND',      TRUNC(INPUT_VALUE/(86400))::varchar || ' ' || 
                                            CASE 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) = 0 THEN '00' 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600)) < 10 THEN '0' ELSE '' END || 
                                            ABS(TRUNC(MOD(INPUT_VALUE,86400)/3600))::varchar || ':' || 
                                                CASE 
                                                    WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) = 0 THEN '00' 
                                                    WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) < 10 THEN '0' ELSE '' END || 
                                               ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) || ':' ||
                                                    CASE 
                                                        WHEN ABS(MOD(INPUT_VALUE, 60)) = 0 THEN '00' 
                                                        WHEN ABS(MOD(INPUT_VALUE, 60)) > -10 AND ABS(MOD(INPUT_VALUE, 60)) < 10 THEN '0' ELSE '' END || 
                                                    ABS(MOD(INPUT_VALUE, 60))::varchar,
                'HOUR',               TRUNC((INPUT_VALUE/3600))::varchar,     
                'HOUR TO MINUTE',     TRUNC(INPUT_VALUE/3600)::varchar || ':' || 
                                            CASE 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) = 0 THEN '00' 
                                                WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) < 10 THEN '0' ELSE '' END || 
                                             ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60))::varchar,
                'HOUR TO SECOND',     TRUNC(INPUT_VALUE/3600)::varchar || ':' || 
                                            CASE WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) = 0 THEN '00' WHEN ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) > -10 AND ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) < 10 THEN '0' ELSE '' END || ABS(TRUNC(MOD(INPUT_VALUE, 3600)/60)) || ':' ||
                                                CASE WHEN ABS(MOD(INPUT_VALUE, 60)) = 0 THEN '00' WHEN ABS(MOD(INPUT_VALUE, 60)) > -10 AND ABS(MOD(INPUT_VALUE, 60)) < 10 THEN '0' ELSE '' END || ABS(MOD(INPUT_VALUE, 60))::varchar,
                'MINUTE',             TRUNC((INPUT_VALUE/60))::varchar,                
                'MINUTE TO SECOND',   TRUNC(INPUT_VALUE/60)::varchar || ':' || 
                                            CASE WHEN ABS(MOD(INPUT_VALUE, 60)) = 0 THEN '00' WHEN ABS(MOD(INPUT_VALUE, 60)) > -10 AND ABS(MOD(INPUT_VALUE, 60)) < 10 THEN '0' ELSE '' END || ABS(MOD(INPUT_VALUE, 60))::varchar,
                'SECOND',             INPUT_VALUE::varchar
)
$$;
